import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

CFL = 1.01
h = 0.5
tau = CFL * h
L = 20
T = 18

x = np.zeros(41)
for i in range(40):
    x[i + 1] = x[i] + 0.5

time = np.zeros(61)
for i in range(60):
    time[i + 1] = time[i] + 0.3

y = np.zeros((61, 41))
y_lw = np.zeros((61, 41))

for i in range(41):
    y[0, i] = np.sin(4 * np.pi * x[i] / L)
    y_lw[0, i] = np.sin(4 * np.pi * x[i] / L)

for t in range(60):
    for i in range(1, 41):
        y[t + 1, i] = y[t, i] - tau * (y[t, i] - y[t, i - 1]) / h
        y[t + 1, 0] = y[t + 1, 40]

fig = plt.figure()
ax = plt.axes(xlim=(0, 20), ylim=(-1, 1))
line, = ax.plot([], [], lw=3)


def init():
    line.set_data([], [])
    return line,


def animate(i):
    x_data = x
    y_data = y_lw[i]
    line.set_data(x_data, y_data)
    return line,


for t in range(60):
    for i in range(1, 40):
        y_lw[t + 1, i] = y_lw[t, i] - tau * (y_lw[t, i + 1] - y_lw[t, i - 1]) / (2 * h) + tau * tau * (
                y_lw[t, i + 1] - 2 * y_lw[t, i] + y_lw[t, i - 1]) / (2 * h * h)
        y_lw[t + 1, 40] = y_lw[t, 40] - tau * (y_lw[t, 0] - y_lw[t, 39]) / (2 * h) + tau * tau * (
                y_lw[t, 0] - 2 * y_lw[t, 40] + y_lw[t, 39]) / (2 * h * h)
        y_lw[t + 1, 0] = y_lw[t, 0] - tau * (y_lw[t, 1] - y_lw[t, 40]) / (2 * h) + tau * tau * (
                y_lw[t, 1] - 2 * y_lw[t, 0] + y_lw[t, 40]) / (2 * h * h)

anim = FuncAnimation(fig, animate, init_func=init,
                     frames=61, interval=40, blit=True)

anim.save('lw_1.01.gif')
plt.show()
