import numpy as np
import matplotlib.pyplot as plt

N = 1000
y0 = 0
y_N = np.pi ** 2
h = np.pi / N
x = np.linspace(0, np.pi, N)
y = np.zeros(N)

y[0] = y0
y[N-1] = y_N
right_side = [0] * N
right_side[0] = y0
right_side[N - 1] = y_N

matrix = np.zeros((N, N))
matrix[0, 0] = 1
matrix[N - 1, N - 1] = 1

for i in range(1, N - 1):
    matrix[i, i - 1] = 1 + h * (x[i] ** 2 - 3) / 2
    matrix[i, i] = -2 + h ** 2 * np.cos(x[i]) * (x[i] ** 2 - 3)
    matrix[i, i + 1] = 1 - h * (x[i] ** 2 - 3) / 2
    right_side[i] = h ** 2 * (
            2 - 6 * x[i] + 2 * x[i] ** 3 + (x[i] ** 2 - 3) * np.exp(x[i]) * np.sin(x[i]) * (1 + np.cos(x[i])) + np.cos(
        x[i]) * (np.exp(x[i]) + x[i] ** 2 - 1 + x[i] ** 4 - 3 * x[i] ** 2))

params = []
pre_params = [- matrix[0, 1] / matrix[0, 0], right_side[0] / matrix[0, 0]]
params.append(pre_params)

for i in range(1, N - 1):
    params.append([-matrix[i, i + 1] / (matrix[i, i - 1] * params[i - 1][0] + matrix[i, i]),
                   (right_side[i] - matrix[i, i - 1] * params[i - 1][1]) / (
                           matrix[i, i - 1] * params[i - 1][0] + matrix[i, i])])

y[N - 1] = (right_side[N - 1] - matrix[N - 1, N - 2] * params[N - 2][1]) / (
        matrix[N - 1, N - 2] * params[N - 2][0] + matrix[N - 1, N - 1])

for i in range(N - 2, -1, -1):
    y[i] = params[i][0] * y[i + 1] + params[i][1]

fig, ax = plt.subplots()import numpy as np
import matplotlib.pyplot as plt
import random

N_ = 11 * 2 ** 9
N = N_ - 2 ** 9 + 1
x = np.linspace(0, 1, N)
h = x[1] - x[0]

y_1 = np.zeros(len(x))
y_2 = np.zeros(len(x))

y_1_4 = np.zeros(len(x))
y_2_4 = np.zeros(len(x))
y_1_4[0] = random.random() * 10
y_2_4[0] = random.random() * 10

# Initial conditions:
y_1[0] = y_1_4[0]
y_2[0] = y_2_4[0]

y_1_an = np.zeros(N)
y_2_an = np.zeros(N)

for i in range(N - 1):
    f1 = -101 * y_1_4[i] + 250 * y_2_4[i]
    f2 = -101 * (y_1_4[i] + h * f1 / 2) + 250 * (y_2_4[i] + h * f1 / 2)
    f3 = -101 * (y_1_4[i] - h * f1 + 2 * h * f2) + 250 * (y_2_4[i] - h * f1 + 2 * h * f2)
    # f4 = -101 * (y_1_4[i] + h * f3) + 250 * (y_2_4[i] + h * f3)

    f1_ = 40 * y_1_4[i] - 101 * y_2_4[i]
    f2_ = 40 * (y_1_4[i] + h * f1_ / 2) - 101 * (y_2_4[i] + h * f1_ / 2)
    f3_ = 40 * (y_1_4[i] - h * f1 + 2 * h * f2_) - 101 * (y_2_4[i] - h * f1 + 2 * h * f2_)
    # f4_ = 40 * (y_1_4[i] + h * f3_) - 101 * (y_2_4[i] + h * f3_)
    y_1_4[i + 1] = y_1_4[i] + h * (f1 + 4 * f2 + f3) / 6
    y_2_4[i + 1] = y_2_4[i] + h * (f1_ + 4 * f2_ + f3_) / 6
    # f1 = -101 * y_1_4[i] + 250 * y_2_4[i]
    # f1_ = 40 * y_1_4[i] - 101 * y_2_4[i]
    # f2 = -101 * (y_1_4[i] + h * f1 / 2) + 250 * (y_2_4[i] + h * f1 / 2)
    # f2_ = 40 * (y_1_4[i] + h * f1_ / 2) - 101 * (y_2_4[i] + h * f1_ / 2)
    # y_1_4[i + 1] = y_1_4[i] + h * (f1 + f2) / 2
    # y_2_4[i + 1] = y_2_4[i] + h * (f1_ + f2_) / 2

for i in range(N):
    y_1_an[i] = (y_2[0] / 4 - y_1[0] / 10) * (-5) * np.exp(-201 * x[i]) + (y_2[0] / 4 + y_1[0] / 10) * 5 * np.exp(-x[i])
    y_2_an[i] = (y_2[0] / 4 - y_1[0] / 10) * 2 * np.exp(-201 * x[i]) + (y_2[0] / 4 + y_1[0] / 10) * 2 * np.exp(-x[i])

for i in range(N - 1):
    y_1[i + 1] = y_1[i] + h * (-101 * y_1[i] + 250 * y_2[i])
    y_2[i + 1] = y_2[i] + h * (40 * y_1[i] - 101 * y_2[i])

fig, ax = plt.subplots(nrows=2, ncols=2)

ax[0, 0].scatter(x, y_1_4, color='r')
ax[0, 0].scatter(x, y_1_an, color='b')

ax[0, 1].scatter(x, y_2_4)
ax[0, 1].scatter(x, y_2_an)

# ax[0].set_xlabel('x')
# ax[0].set_ylabel('y_1')

ax[1, 0].scatter(x, y_1)
ax[1, 0].scatter(x, y_1_an)
ax[1, 1].scatter(x, y_2)
ax[1, 1].scatter(x, y_2_an)

# ax[1].set_xlabel('x')
# ax[1].set_ylabel('y_2')
plt.show()
print(([abs(y_1_4[int(N_ * i / 11)] - y_1_an[int(N_ * i / 11)]) for i in range(11)]),
      ([abs(y_2_4[int(N_ * i / 11)] - y_2_an[int(N_ * i / 11)]) for i in range(11)]))
print(([abs(y_1[int(N_ * i / 11)] - y_1_an[int(N_ * i / 11)]) for i in range(11)]),
      ([abs(y_2[int(N_ * i / 11)] - y_2_an[int(N_ * i / 11)]) for i in range(11)]))
print("Число узлов = ", N)
plt.close()

ax.scatter(x, y)


def points(n):
    a_1 = (y[int(n // h)] - y[int(n // h + 1)]) / (x[int(n // h)] - x[int(n // h + 1)])
    b_1 = y[int(n // h + 1)] - a_1 * x[int(n // h + 1)]
    return a_1 * n + b_1


print(points(0.5), points(1), points(1.5), points(2), points(2.5), points(3), sep='\n')
plt.show()
plt.close()
