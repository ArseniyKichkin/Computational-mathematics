import numpy as np
import matplotlib.pyplot as plt


N = 1000
h = 1 / N
tolerance = 0.0001

a1 = 1.84
a2 = 2
parameters = []

nodes = np.linspace(0, 1, N + 1)


def f(x_, arr):
    return np.array([arr[1], x_ * np.sqrt(arr[0])])


dots = []


def iterate(a, N, u_):
    for i in range(N):
        ui = u_[i]
        f1 = f(nodes[i], ui)
        u2 = ui + h * f1 / 2
        f2 = f(nodes[i] + h / 2, u2)
        u3 = ui + h * f2 / 2
        f3 = f(nodes[i] + h / 2, u3)
        u4 = ui + h * f3
        f4 = f(nodes[i] + h, u4)

        # u[i + 1] = u[i] + h * (f(nodes[i], u[i]) + 3 * f(nodes[i] + 2 * h / 3, u[i] + 2 * h * (
        #    f(nodes[i] + h / 3, u[i] + h * f(nodes[i], u[i]) / 3)) / 3)) / 4

        u_[i + 1] = ui + h * (f1 + 2 * f2 + 2 * f3 + f4) / 6

    dots.append(u_[N - 1, 0])
    parameters.append(a)
    return u_


u = np.array([0. for i in range(2 * (N + 1))])
u = u.reshape(N + 1, 2)
u[0] = [0, a1]

iterate(a1, N, u)

u = np.array([0. for j in range(2 * (N + 1))])
u = u.reshape(N + 1, 2)
u[0] = [0, a2]
iterate(a2, N, u)

res = 1
result = []

while res > tolerance:
    alpha = (parameters[0] + parameters[1]) / 2
    u = np.array([0. for i in range(2 * (N + 1))])
    u = u.reshape(N + 1, 2)
    u[0] = [0, alpha]
    u = iterate(alpha, N, u)

    if (dots[0] - 2) * (dots[2] - 2) < 0:
        parameters = [parameters[0], alpha]
        dots = [dots[0], dots[2]]
    else:
        parameters = [parameters[1], alpha]
        dots = [dots[1], dots[2]]
    res = abs(u[N - 1, 0] - 2.)

print("alpha = ", str(u[0, 1]), u)
y = [i[0] for i in u]
fig, ax = plt.subplots()
ax.scatter(nodes, y)
plt.show()

